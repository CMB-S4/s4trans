#!/usr/bin/env python

from s4trans import s4pipe
import argparse
import time
import os


def cmdline():

    parser = argparse.ArgumentParser(description="CMBS4 transient testing pipeline")
    parser.add_argument("files", nargs='+',
                        help="Filename(s) to preocess")
    parser.add_argument("--outdir", type=str, action='store', default=None,
                        required=True, help="Location for output files")

    # DB options
    dbname = os.path.join(os.environ['HOME'], "db/s4sims_DC0.db")
    parser.add_argument("--dbname", type=str, action='store', default=dbname,
                        help="Database (file) to connect")
    parser.add_argument("--tablename", type=str, action='store', default='on_fraction_DC0',
                        help="Name of table with file informatiom")

    # Fraction threshold
    parser.add_argument("--onfracion_thresh", action='store', type=float, default=0.8,
                        help="On Fraction threshold")
    parser.add_argument("--proj_name", nargs='+', action='store', default=None, required=True,
                        help="Projection to use")

    # Write options
    parser.add_argument("--indirect_write", action='store_true', default=False,
                        help="Use indirect write of files to /tmp before moving to destionation.")
    parser.add_argument("--indirect_write_path", action='store', default=None,
                        help="Path for indirect write.")
    parser.add_argument("--output_filetypes", nargs='+', default=['FITS'],
                        help="Output filetype [G3, FITS]")

    # Inject/Insert sources
    parser.add_argument("--source_catalog", action='store', type=str, default=None,
                        help='Coma-separated catalog with RA,DEC,FLUX to insert into frames')

    # Clone weights_clone
    parser.add_argument("--clone_weight", action='store_true', default=False,
                        help='Add cloned weights of zeroes and ones')
    # Normalize weights
    parser.add_argument("--normalize_weight", action='store_true', default=False,
                        help='Normalize weights')

    # Logging options (loglevel/log_format/log_format_date)
    default_log_format = '[%(asctime)s.%(msecs)03d][%(levelname)s][%(name)s][%(funcName)s] %(message)s'
    default_log_format_date = '%Y-%m-%d %H:%M:%S'
    parser.add_argument("--loglevel", action="store", default='INFO', type=str.upper,
                        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                        help="Logging Level [DEBUG/INFO/WARNING/ERROR/CRITICAL]")
    parser.add_argument("--log_format", action="store", type=str, default=default_log_format,
                        help="Format for logging")
    parser.add_argument("--log_format_date", action="store", type=str, default=default_log_format_date,
                        help="Format for date section of logging")
    args = parser.parse_args()

    # Check environmental variables for indirect_write
    if args.indirect_write_path is None and args.indirect_write is True:
        if 'S4_CUTTER_INDIRECT_WRITE_PATH' in os.environ:
            args.indirect_write_path = os.environ['S4_CUTTER_INDIRECT_WRITE_PATH']
        else:
            args.indirect_write_path = '/tmp'

    # Define the prefix
    if args.indirect_write:
        args.indirect_write_prefix = os.path.join(args.indirect_write_path, 's4pipe-')

    #  The number of files
    args.nfiles = len(args.files)
    return args


if __name__ == "__main__":

    # Keep time
    t0 = time.time()

    # Get the command-line arguments
    args = cmdline()
    p = s4pipe.S4pipe(**args.__dict__)
    p.project_sims(filetypes=args.output_filetypes)
