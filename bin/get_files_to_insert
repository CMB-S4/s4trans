#!/usr/bin/env python

from s4trans import s4pipe
from s4trans import s4tools
import argparse
import time
import os


def cmdline():

    parser = argparse.ArgumentParser(description="CMBS4 transient testing pipeline")
    parser.add_argument("obs_key", type=str, action='store',
                        help="The central observation keyID")
    parser.add_argument("--obs_width", type=int, action='store', default=15,
                        help="Lightcurve observation width")
    parser.add_argument("--scan", action="store", default='RISING', type=str.upper,
                        choices=["RISING", "SETTING"],
                        help="Scan type [RISING/SETTING]")

    # DB options
    dbname = os.path.join(s4tools.S4TRANS_DIR, "etc/s4sims_DC0.db")
    parser.add_argument("--dbname", type=str, action='store', default=dbname,
                        help="Database (file) to connect")
    parser.add_argument("--tablename", type=str, action='store', default='on_fraction_DC0',
                        help="Name of table with file informatiom")

    # Fraction threshold
    parser.add_argument("--onfracion_thresh", action='store', type=float, default=0.8,
                        help="On Fraction threshold")
    parser.add_argument("--proj_name", action='store', type=str, default=None,
                        help="Projection to use")
    parser.add_argument("--get_scale", action='store_true', default=False,
                        help="Get flux scale per file")

    # Logging options (loglevel/log_format/log_format_date)
    default_log_format = '[%(asctime)s.%(msecs)03d][%(levelname)s][%(name)s][%(funcName)s] %(message)s'
    default_log_format_date = '%Y-%m-%d %H:%M:%S'
    parser.add_argument("--loglevel", action="store", default='INFO', type=str.upper,
                        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
                        help="Logging Level [DEBUG/INFO/WARNING/ERROR/CRITICAL]")
    parser.add_argument("--log_format", action="store", type=str, default=default_log_format,
                        help="Format for logging")
    parser.add_argument("--log_format_date", action="store", type=str, default=default_log_format_date,
                        help="Format for date section of logging")

    parser.add_argument("--output", type=str, action='store', default=None,
                        help="File with output list")
    args = parser.parse_args()

    return args


if __name__ == "__main__":

    # Keep time
    t0 = time.time()

    # Get the command-line arguments
    args = cmdline()
    p = s4pipe.S4pipe(**args.__dict__)
    files = p.get_files_to_insert(args.obs_key, args.obs_width, args.scan, args.proj_name)

    if args.output is None:
        args.output = f"selected_files_{args.obs_key}_{args.proj_name}.dat"

    print(f"Will write files to: {args.output}")
    with open(args.output, 'w') as f:
        for file in files:
            # Now we get the fluxes:
            if args.get_scale:
                scale = p.get_flux_scale(file, args.obs_key, args.obs_width, args.proj_name,
                                         scan=args.scan, nsigma=3)
                f.write(f"{file} {scale}\n")
            else:
                f.write(f"{file}\n")

    print(f"Wrote files to: {args.output}")
